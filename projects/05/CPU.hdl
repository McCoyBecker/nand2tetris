// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:

    /* A handy memory reference. */
    // i  x  x  a  c1 c2 c3 c4 c5 c6 d1 d2 d3 j1 j2 j3
    // 15 14 13 12 11 10 09 08 07 06 05 04 03 02 01 00

    /* Mux to A register with . */

    Mux16(a = instruction, b = Alu2D, sel = instruction[15], out = Mux2A);

    /* Control logic for A register. */

    Not(in = instruction[15], out = iSlotInstruction);
    Or(a = iSlotInstruction, b = instruction[5], out = boolALoad);

    /* A register. */

    ARegister(in = Mux2A, load = boolALoad, out = A2Mux, out[0..14] = addressM, out = A2PC);

    /* Control logic for Mux to ALU. */
    
    And(a = instruction[15], b = instruction[12], out = boolSel);

    /* Mux to ALU. */

    Mux16(a = A2Mux, b = inM, sel = boolSel, out = Mux2ALU);

    /* Control logic for D register. */

    And(a = instruction[15], b = instruction[4], out = boolDLoad);

    /* D register. */

    DRegister(in = Alu2D, load = boolDLoad, out = D2ALU);

    /* Control logic for PC. */

    Not(in = BoolOutputZero, out = BoolOutputNonZero);
    Not(in = BoolOutputNeg, out = BoolOutputNonNeg);
    And(a = BoolOutputNonZero, b = BoolOutputNonNeg, out = BoolOutputPos);
    And16(a[0] = BoolOutputNeg, a[1] = BoolOutputZero, a[2] = BoolOutputPos, a[3..15] = false, b[0] = instruction[2], b[1] = instruction[1], b[2] = instruction[0], b[3..15] = false, out[0..7] = jmpTestArray);
    Or8Way(in = jmpTestArray, out = jmpTest);
    And(a = instruction[15], b = jmpTest, out = boolJMP);
    Not(in = boolJMP, out = incTest);

    /* PC. */

    PC(in = A2PC, reset = reset, load = boolJMP, inc = incTest, out[0..14] = pc);

    /* Control logic for the ALU. */

    And(a = instruction[11], b = instruction[11], out = boolZX);
    And(a = instruction[10], b = instruction[10], out = boolNX);
    And(a = instruction[9], b = instruction[9], out = boolZY);
    And(a = instruction[8], b = instruction[8], out = boolNY);
    And(a = instruction[7], b = instruction[7], out = boolF);
    And(a = instruction[6], b = instruction[6], out = boolNO);

    /* ALU. */

    ALU(x = D2ALU, y = Mux2ALU, zx = boolZX, nx = boolNX, zy = boolZY, ny = boolNY, f = boolF, no = boolNO, out = outM, out = Alu2D, zr = BoolOutputZero, ng = BoolOutputNeg);

    /* Control logic for writeM. */

    And(a = instruction[3], b = instruction[15], out = writeM);
}